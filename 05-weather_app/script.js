// Cl√© API pour acc√©der aux donn√©es m√©t√©orologiques depuis OpenWeatherMap.
// Remplace 'c1d1fd315ae3d987ee0cf68509d9f96b' par ta propre cl√© API si n√©cessaire.
const apiKey = 'c1d1fd315ae3d987ee0cf68509d9f96b';

// D√©claration d'une autre variable pour la cl√© API, non utilis√©e dans le code.
// Celle-ci pourrait √™tre supprim√©e pour √©viter toute confusion.
const apiKey1 = 'your_openweathermap_api_key';

// S√©lectionne le bouton de recherche dans le document HTML en utilisant son ID.
const searchBtn = document.getElementById('search-btn');

// S√©lectionne le champ de saisie o√π l'utilisateur entre le nom de la ville.
const cityInput = document.getElementById('city-input');

// S√©lectionne les √©l√©ments HTML o√π les informations m√©t√©orologiques seront affich√©es.
const cityName = document.getElementById('city-name');
const temperature = document.getElementById('temperature');
const description = document.getElementById('description');
const humidity = document.getElementById('humidity');
const wind = document.getElementById('wind');

// S√©lectionne la section contenant les informations m√©t√©orologiques.
const weatherInfo = document.querySelector('.weather-info');

// S√©lectionne l'√©l√©ment HTML o√π les messages d'erreur seront affich√©s.
const errorMessage = document.getElementById('error-message');

// Ajoute un gestionnaire d'√©v√©nement au bouton de recherche.
// Lorsque le bouton est cliqu√©, la fonction anonyme v√©rifie si un nom de ville est entr√©.
searchBtn.addEventListener('click', () => {
    // R√©cup√®re et nettoie la valeur entr√©e par l'utilisateur dans le champ de saisie.
    const city = cityInput.value.trim();
    
    // Si un nom de ville a √©t√© entr√©, appelle la fonction pour obtenir les donn√©es m√©t√©o.
    if (city) {
        getWeather(city);
    } else {
        // Si le champ est vide, affiche un message d'erreur demandant d'entrer un nom de ville valide.
        displayError('Please enter a valid city name.');
    }
});

// Fonction pour obtenir les donn√©es m√©t√©o depuis l'API OpenWeatherMap pour la ville donn√©e.
function getWeather(city) {
    // Cr√©e l'URL pour la requ√™te API en incluant le nom de la ville et la cl√© API.
    const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`;

    // Effectue une requ√™te pour obtenir les donn√©es m√©t√©orologiques.
    fetch(url)
        // Convertit la r√©ponse en un objet JSON.
        .then(response => response.json())
        // Traite les donn√©es re√ßues.
        .then(data => {
            // Si le code de r√©ponse est 200, cela signifie que la ville a √©t√© trouv√©e avec succ√®s.
            if (data.cod === 200) {
                // Met √† jour l'interface utilisateur avec les nouvelles informations m√©t√©o.
                updateWeatherInfo(data);

                // Efface tout message d'erreur pr√©c√©dent.
                clearError();
            } else {
                // Si la ville n'est pas trouv√©e, affiche un message d'erreur.
                displayError('City not found. Please try another city.');
            }
        })
        // Si une erreur se produit lors de la requ√™te (ex: probl√®me de connexion), affiche un message d'erreur.
        .catch(error => {
            displayError('An error occurred. Please try again later.');
            console.error(error);
        });
}

// Fonction pour mettre √† jour les informations m√©t√©orologiques affich√©es √† l'√©cran.
function updateWeatherInfo(data) {
    // Affiche le nom de la ville.
    console.log(data)
    cityName.textContent = data.name;
    // Affiche la temp√©rature en degr√©s Celsius, arrondie √† une d√©cimale.
    temperature.textContent = `${data.main.temp.toFixed(1)}¬∞C`;
    // Affiche la description du temps avec un emoji, et capitalise la premi√®re lettre.
    description.textContent = `üå§Ô∏è ${capitalize(data.weather[0].description)}`;
    // Affiche le taux d'humidit√©.
    humidity.textContent = `üíß Humidity: ${data.main.humidity}%`;
    // Affiche la vitesse du vent en m√®tre par seconde, arrondie √† une d√©cimale.
    wind.textContent = `üí® Wind Speed: ${data.wind.speed.toFixed(1)} m/s`;

    // Rend visible la section contenant les informations m√©t√©o.
    weatherInfo.style.display = 'block';
}

// Fonction pour capitaliser la premi√®re lettre d'une cha√Æne de caract√®res.
function capitalize(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
}

// Fonction pour afficher un message d'erreur.
function displayError(message) {
    // Affiche le message d'erreur pass√© en param√®tre.
    errorMessage.textContent = message;
    errorMessage.style.display = 'block';
    // Masque les informations m√©t√©o, car elles ne sont pas pertinentes si une erreur est survenue.
    weatherInfo.style.display = 'none';
}

// Fonction pour effacer le message d'erreur.
function clearError() {
    // R√©initialise le contenu et masque l'affichage du message d'erreur.
    errorMessage.textContent = '';
    errorMessage.style.display = 'none';
}
